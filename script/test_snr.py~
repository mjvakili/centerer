#!/usr/bin/env python



"""
Goal: This code tests centroiding of a set of 
normalized moffat profiles with a given FWHM and beta
in a given range of signal-to-noise-ratios,
using three different models:
SDSS method, Polynomial method, 
and PSF fitting method.

Dependencies: numpy, profile.py,
              poly.py, sdss.py
Author: Mohammadjavad Vakili (July and August 2014)
"""

import centererrr
import numpy as np
import sys



if __name__ == '__main__':
    from optparse import OptionParser
    o = OptionParser()
    #o.set_usage('%prog [options]')
    #o.set_description(__doc__)

    o.add_option('-m', '--method', dest='method', default='poly',
        help='Set the centroiding method, polynomial or sdss or fitting, default: polynomial')
    o.add_option('-f', '--fwhm', dest='fwhm', default= 2., type='float',
        help='FWHM of the moffat profile, default: 2')
    o.add_option('-b', '--beta', dest='beta', default= 2.5, type='float',
        help='Dimensionless parameter of Moffat profile, default: 2.5')
    
    o.add_option('--smin', dest='smin', default=5., type='float',
        help='Minimum S/N in experiment, default: 10.0')
    o.add_option('--smax', dest='smax', default=150, type='float',
        help='Maximum S/N in experiment, default: 150.0')
    o.add_option('--size', dest='size', default=17, type='int',
        help='size of the postage_stamp')
    o.add_option('--sample', dest='sample', default=20000, type='int',
        help='number of stars in experiment')
    opts, args = o.parse_args(sys.argv[1:])


    #ifn=args[0]
    
    if not (opts.size is None):
        size = opts.size
    
    if not (opts.fwhm is None):
        fwhm = opts.fwhm

    if not (opts.smin is None):
        smin = opts.smin

    if not (opts.smax is None):
        smax = opts.smax

    if not (opts.sample is None):
        sample = opts.sample

    if not (opts.beta is None):
        beta = opts.beta
    
    
    xmin , xmax = size/2 , size/2 + 1
    ymin , ymax = size/2 , size/2 + 1
    
    sigmamin = .478/(fwhm*smax)
    sigmamax = .478/(fwhm*smin)
    
    sigma = 10.**(np.random.uniform(np.log10(sigmamin), np.log10(sigmamax), sample))
    xx = np.random.uniform(xmin, xmax, sample)
    yy = np.random.uniform(ymin, ymax, sample)

    
    if opts.method.startswith('poly'):

       er = []
       flag = []
       noise = []
       A = centererr.poly.design(2)

       for i in range(sample):
          
          xc =  np.array([xx[i],yy[i]])          
          data = centererr.profile.makeMoffat(size , fwhm , beta , 0 , xc)
          data += np.random.normal(0, sigma[i] , data.shape)
          
          xs = centererr.poly.poly_centroid(data , A)
          cen = centererr.poly.BP(data)
          er.append(((xs[0] + cen[0] + .5 - xc[0])**2. + (xs[1] + cen[1] + .5 -xc[1])**2.)**.5)
          noise.append(sigma[i])
          if ((xs[0]>.5)|(xs[0]<-.5)|(xs[1]>.5)|(xs[1]<-.5)|(xs[0].imag!=0.)|(xs[1].imag!=0.)):
          
            flag.append(i)
       
       np.savetxt("er.txt" , np.array(er) ,fmt='%.8f')
       np.savetxt("flag.txt" , np.array(flag) , fmt = '%.8f')
       np.savetxt("noise.txt" , np.array(noise) , fmt = '%.8f')


    elif opts.method.startswith('sdss'):

       er = []
       flag = []
       noise = []
       

       for i in range(sample):
          
          xc =  np.array([xx[i],yy[i]])                  # true centroid
          data = centererr.profile.makeMoffat(size , fwhm , beta , 0 , xc)
          data += np.random.normal(0, sigma[i] , data.shape)
          cen = centererr.sdss.BP(data , fwhm)
          xs = centererr.sdss.sdss_centroid(data , fwhm , sigma[i])
          
          er.append(((xs[0] + cen[0] + .5 - xc[0])**2. + (xs[1] + cen[1] + .5 -xc[1])**2.)**.5)
          noise.append(sigma[i])
          if ((xs[0]>.5)|(xs[0]<-.5)|(xs[1]>.5)|(xs[1]<-.5)|(xs[0].imag!=0.)|(xs[1].imag!=0.)):
          
            flag.append(i)
          
       np.savetxt("er.txt" , np.array(er) ,fmt='%.8f')
       np.savetxt("flag.txt" , np.array(flag) , fmt = '%.8f')
       np.savetxt("noise.txt" , np.array(noise) , fmt = '%.8f')

    elif opts.method.startswith('fitting'):
       
       er = []
       flag = []
       noise = []
       

       for i in range(sample):
          
          xc =  np.array([xx[i],yy[i]])                  # true centroid
          data = centererr.profile.makeMoffat(size , fwhm , beta , 0 , xc)
          data += np.random.normal(0, sigma[i] , data.shape)
          
          xs = centererr.fitting.fitting_centroid(data)
          
          er.append(((xs[0]  - xc[0])**2. + (xs[1]  -xc[1])**2.)**.5)
          noise.append(sigma[i])
          
       np.savetxt("er.txt" , np.array(er) ,fmt='%.8f')
       np.savetxt("noise.txt" , np.array(noise) , fmt = '%.8f')
